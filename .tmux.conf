# https://github.com/seebi/tmux-colors-solarized/blob/master/tmuxcolors-256.conf
if-shell '[ -e /home/deploy/liuxiang/local/bin/zsh ]' 'set -g default-shell /home/deploy/liuxiang/local/bin/zsh'

set-window-option -g allow-rename on
set-option -g history-limit 4096

set-option -g status-style default
set-option -g status-style bg=colour235,fg=colour244

bind-key ? list-keys

bind-key t display-popup -d $PWD -w 90% -h 90% -E htop

# set window split
bind-key v split-window -h
bind-key b split-window
bind-key | split-window -h
bind-key - split-window
bind-key C-l clear-history

# default window title colors
set-window-option -g window-status-style fg=colour244,bg=default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-style fg=colour166,bg=default
#set-window-option -g window-status-current-style bright

set-option -g set-titles on
if 'test -n "$SSH_CLIENT"' 'set-option -g set-titles-string "#h"'  'set-option -g set-titles-string "#{session_name}"'

# pane border
set-option -g pane-border-style fg=colour235 #base02
# set-option -g pane-active-border-style fg=colour240 #base01
set-option -g pane-active-border-style fg=colour235 #base02

# message text
set-option -g message-style bg=colour235,fg=colour166

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange
set-option -g display-panes-time 60000
# clock
set-window-option -g clock-mode-colour green #green


set -g status-interval 0
set -g status-justify centre # center align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left '#[fg=white,bright]#([ #{window_zoomed_flag} = 1 ] && echo ★)  #[default]#[fg=green]#(hostname -s | sed "s/LiuXiang//")#[fg=black,bright](#[fg=green,bright]#S#[fg=black])#[default]'
set -g status-right '#[fg=white,bright]#([ #{window_zoomed_flag} = 1 ] && echo ★) #[default]'

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-j
bind-key C-j last-window

bind-key C-b copy-mode

# Start numbering at 1
set -g base-index 1
set-window-option -g pane-base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind-key a send-prefix

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# bind-key C-s choose-tree

# from powerline
run-shell "tmux set-environment -g TMUX_VERSION_MAJOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f1 | sed 's/[^0-9]*//g')"
run-shell "tmux set-environment -g TMUX_VERSION_MINOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f2 | sed 's/[^0-9]*//g')"

# Vi copypaste mode
set-window-option -g mode-keys vi
if-shell 'test \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -ge 4 -o $TMUX_VERSION_MAJOR -ge 3 \)' "bind-key -T copy-mode-vi 'v' send -X begin-selection" "bind-key -t vi-copy 'v' begin-selection"
if-shell 'test \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -ge 4 -o $TMUX_VERSION_MAJOR -ge 3 \)' "bind-key -T copy-mode-vi 'y' send -X copy-selection" "bind-key -t vi-copy 'y' copy-selection"

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# bind 7 select-pane -t :.1
# bind 8 select-pane -t :.2
# bind 9 select-pane -t :.3
# bind 0 select-pane -t :.4

bind 7 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-1' 'select-pane -t :.1'
bind 8 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-2' 'select-pane -t :.2'
bind 9 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-3' 'select-pane -t :.3'
bind 0 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-4' 'select-pane -t :.4'

bind -r > select-window -t :+1
bind -r < select-window -t :-1

bind -r H resize-pane -L "5"
bind -r D resize-pane -D "5"
bind -r K resize-pane -U "5"
bind -r L resize-pane -R "5"

# set to main-horizontal, 60% height for main pane
# bind m set-window-option main-pane-height 60\; select-layout main-horizontal
bind m select-layout even-vertical
bind v select-layout even-horizontal

bind C-M-1 select-layout even-horizontal
bind C-M-2 select-layout even-vertical
bind C-M-3 select-layout main-horizontal
bind C-M-4 select-layout main-vertical
bind C-M-5 select-layout tiled

bind-key S set synchronize-panes

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

bind-key l "new-window -n vrl vrl"

# bind J select-pane -m \; choose-tree -u -c 'join-pane -t "%%"'
# bind J run-shell 'function tmux_join_pane() { tmux choose-tree -u -c "join-pane -s $1" ; } ; tmux_join_pane "#{session_name}:#{window_index}"'
# bind M choose-tree -b "run-shell 'function tmux_move_window () { tmux move-window -t $1 ; tmux switch-client -t $1; } ;tmux_move_window  %%'"

# if-shell '[ $(uname -s) = Darwin ]' "bind J choose-tree -u -b 'run :' -c 'run-shell \"tmux-join-pane %%\"'" "bind J run-shell 'function tmux_join_pane() { tmux choose-tree -u -c \"join-pane -s $1\" ; } ; tmux_join_pane \"#{session_name}:#{window_index}\"'"
# if-shell '[ $(uname -s) = Darwin ]' "bind M choose-tree -b 'run-shell \"tmux-move-window %%\"'" "bind M choose-tree -b \"run-shell 'function tmux_move_window () { tmux move-window -t $1 ; tmux switch-client -t $1; } ;tmux_move_window  %%'\""
# if-shell '[ $(uname -s) = Darwin ]' "bind C-k choose-tree -u -b 'run :' -c 'run-shell \"tmux-choose-iTerm2-tree %%\"'"

if-shell '[ $(uname -s) = Darwin ]' "bind J choose-tree 'run-shell \"tmux-join-pane %%\"'" "bind J run-shell 'function tmux_join_pane() { tmux choose-tree -u -c \"join-pane -s $1\" ; } ; tmux_join_pane \"#{session_name}:#{window_index}\"'"
if-shell '[ $(uname -s) = Darwin ]' "bind M choose-tree 'run-shell \"tmux-move-window %%\"'" "bind M choose-tree \"run-shell 'function tmux_move_window () { tmux move-window -t $1 ; tmux switch-client -t $1; } ;tmux_move_window  %%'\""
if-shell '[ $(uname -s) = Darwin ]' "bind C-k choose-tree 'run-shell \"tmux-choose-iTerm2-tree %%\"'"


bind Tab switch-client -l

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."
if-shell '[ ! -e ~/liuxiang/.tmux.conf ]' 'bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."' 'bind r source-file ~/liuxiang/.tmux.conf \; display-message "Config reloaded..."'

# auto window rename
set-window-option -g automatic-rename

# color
set -g default-terminal "screen-256color"

# https://github.com/edkolev/dots/blob/master/tmux.conf
# Updates for tmux 1.9's current pane splitting paths.

# status bar
if-shell '\( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -lt 2\) -o $TMUX_VERSION_MAJOR -le 1' 'set-option -g status-utf8 on'

# rm mouse mode fail
if-shell 'test \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -ge 1 -o $TMUX_VERSION_MAJOR -ge 3 \)' 'set -g mouse on'
if-shell 'test \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -lt 1 \) -o $TMUX_VERSION_MAJOR -le 1' 'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on;'

# fix pane_current_path on new window and splits
if-shell "test '$TMUX_VERSION_MAJOR -gt 1 -o \( $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -ge 8 \)' && [ $(uname -s) = Darwin ]" 'unbind c; bind c new-window -c "#{pane_current_path}"'  'unbind c; bind c new-window -c ""'
if-shell "test '$TMUX_VERSION_MAJOR -gt 1 -o \( $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -ge 8 \)' && [ $(uname -s) = Darwin ]" "unbind '-'; bind '-' split-window -v -c '#{pane_current_path}'" "unbind '-'; bind '-' split-window -v -c ''"
if-shell "test '$TMUX_VERSION_MAJOR -gt 1 -o \( $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -ge 8 \)' && [ $(uname -s) = Darwin ]" 'unbind |; bind | split-window -h -c "#{pane_current_path}"' 'unbind |; bind | split-window -h -c ""'
if-shell "test '$TMUX_VERSION_MAJOR -gt 1 -o \( $TMUX_VERSION_MAJOR -eq 1 -a $TMUX_VERSION_MINOR -ge 8 \)' && [ $(uname -s) = Darwin ]" 'unbind |; bind | split-window -h -c "#{pane_current_path}"' 'unbind |; bind | split-window -h -c ""'

if-shell 'test $(uname) = Darwin' 'source-file ~/.tmux/.tmux-osx.conf'

if-shell 'test \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -ge 1 -o $TMUX_VERSION_MAJOR -ge 3 \)' "bind C-m if-shell 'tmux show -gq mouse | grep -q on' 'set -g mouse off; display \"Mouse: OFF\"' 'set -g mouse on; display \"Mouse: ON\"'"
if-shell 'test \( $TMUX_VERSION_MAJOR -eq 2 -a $TMUX_VERSION_MINOR -lt 1 \) -o $TMUX_VERSION_MAJOR -le 1' "bind C-m if-shell 'tmux show -gwq mode-mouse | grep -q on' 'set -g mode-mouse off; set -g mouse-resize-pane off; set -g mouse-select-pane off; set -g mouse-select-window off; display \"Mouse: OFF\"' 'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on; display \"Mouse: ON\"'"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin "tmux-plugins/tmux-continuum"
set -g @plugin "fcsonline/tmux-thumbs"

set -g @resurrect-dir '~/.tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
set -g @thumbs-command 'echo -n {} | pbcopy'

if-shell '[ $(uname -s) = Darwin ]' "set -g @continuum-restore 'on'" ""
# if-shell '[ $(uname -s) = Darwin ]' "set -g @continuum-boot 'on'" ""
# if-shell '[ $(uname -s) = Darwin ]' "set -g @continuum-boot-options 'iterm'" ""

# if-shell '[ $(uname -s) = Darwin ]' "set -g @resurrect-processes '\"~spring server->spring-server\" \"ruby bin/rails server->rs\" \"~rails server -p 3000->rs -p 3000\" \"~rails server -p 3001->rs -p 3001\" \"~rails server -p 3002->rs -p 3002\" \"~rails server -p 3003->rs -p 3003\" \"~puma 3.10.0 (tcp://0.0.0.0:4000)->rs -b 0.0.0.0 -p 4000\" \"~puma 3.10.0 (tcp://localhost:4000)->rs -p 4000\" \"~puma 3.10.0 (tcp://localhost:4001)->rs -p 4001\" \"~puma 3.10.0 (tcp://localhost:4002)->rs -p 4002\" \"~puma 3.10.0 (tcp://localhost:4003)->rs -p 4003\" \"~puma 3.10.0 (tcp://localhost:5000)->rs -p 5000\" \"~puma 3.10.0 (tcp://localhost:5001)->rs -p 5001\" \"~puma 3.10.0 (tcp://localhost:5002)->rs -p 5002\" \"~puma 3.10.0 (tcp://localhost:5003)->rs -p 5003\"" ""

if-shell '[ ! -e ~/liuxiang/.tmux.conf ]' "run '~/.tmux/plugins/tpm/tpm'" "run '~/liuxiang/.tmux/plugins/tpm/tpm'"

bind-key C-r run-shell "~/.tmux/plugins/tmux-resurrect/scripts/restore.sh; ~/bin/boom"

# Detach all other clients
bind-key C-d run-shell 'for client in $(tmux list-clients -t . | sed "s/:.*//"); do { echo "$client" | grep -vqF "#{client_name}"; } && tmux detach-client -t "$client"; done'

bind -n M-C {
  copy-mode
  send -X clear-selection
  send -X start-of-line
  send -X start-of-line
 
  if -F "#{m:❯*,#{copy_cursor_line}}" {
    send -X cursor-up
  }

  send -X cursor-up
  send -X start-of-line
  send -X start-of-line

  if -F "#{m:❯*,#{copy_cursor_line}}" {
    send -X stop-selection
    send -X -N 2 cursor-right
    send -X begin-selection
    send -X end-of-line
    send -X end-of-line
    send -X cursor-left
  } {
    send -X end-of-line
    send -X end-of-line
    send -X begin-selection
    send -X search-backward-text "❯"
    send -X end-of-line
    send -X end-of-line
    send -X cursor-right
    send -X stop-selection
  }
}

bind -n M-V {
  copy-mode
  send -X clear-selection
  send -X start-of-line
  send -X start-of-line
 
  if -F "#{m:❯*,#{copy_cursor_line}}" {
    send -X cursor-down
    send -X start-of-line
    send -X start-of-line
    send -X begin-selection
    send -X search-forward-text "❯"
    send -X cursor-up
    send -X cursor-up
    send -X cursor-up
    send -X end-of-line
    send -X end-of-line
    send -X stop-selection
  } {
    send -X search-forward-text "❯"
    send -X start-of-line
    send -X start-of-line
    send -X -N 2 cursor-right
    send -X begin-selection
    send -X end-of-line
    send -X end-of-line
    send -X stop-selection
  }
}